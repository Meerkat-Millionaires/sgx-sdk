pub use permissions::*;
/// This module was auto-generated with ethers-rs Abigen.
/// More information at: <https://github.com/gakonst/ethers-rs>
#[allow(
    clippy::enum_variant_names,
    clippy::too_many_arguments,
    clippy::upper_case_acronyms,
    clippy::type_complexity,
    dead_code,
    non_camel_case_types,
)]
pub mod permissions {
    #[rustfmt::skip]
    const __ABI: &str = "[{\"inputs\":[{\"internalType\":\"enum Permissions.Permission\",\"name\":\"p\",\"type\":\"uint8\",\"components\":[]}],\"stateMutability\":\"pure\",\"type\":\"function\",\"name\":\"getPermissionCode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"granter\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"grantee\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"permission\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"hasPermission\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"permissions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]}]";
    ///The parsed JSON ABI of the contract.
    pub static PERMISSIONS_ABI: ::ethers::contract::Lazy<::ethers::core::abi::Abi> = ::ethers::contract::Lazy::new(||
    ::ethers::core::utils::__serde_json::from_str(__ABI).expect("ABI is always valid"));
    #[rustfmt::skip]
    const __BYTECODE: &[u8] = &[
        96,
        128,
        96,
        64,
        82,
        52,
        128,
        21,
        97,
        0,
        16,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        2,
        186,
        128,
        97,
        0,
        32,
        96,
        0,
        57,
        96,
        0,
        243,
        254,
        96,
        128,
        96,
        64,
        82,
        52,
        128,
        21,
        97,
        0,
        16,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        4,
        54,
        16,
        97,
        0,
        65,
        87,
        96,
        0,
        53,
        96,
        224,
        28,
        128,
        99,
        31,
        152,
        56,
        181,
        20,
        97,
        0,
        70,
        87,
        128,
        99,
        139,
        1,
        129,
        61,
        20,
        97,
        0,
        132,
        87,
        128,
        99,
        165,
        114,
        220,
        116,
        20,
        97,
        0,
        218,
        87,
        91,
        96,
        0,
        128,
        253,
        91,
        97,
        0,
        110,
        97,
        0,
        84,
        54,
        96,
        4,
        97,
        1,
        74,
        86,
        91,
        96,
        0,
        96,
        32,
        129,
        129,
        82,
        146,
        129,
        82,
        96,
        64,
        128,
        130,
        32,
        144,
        147,
        82,
        144,
        129,
        82,
        32,
        84,
        129,
        86,
        91,
        96,
        64,
        81,
        97,
        0,
        123,
        145,
        144,
        97,
        1,
        143,
        86,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        243,
        91,
        97,
        0,
        205,
        97,
        0,
        146,
        54,
        96,
        4,
        97,
        1,
        174,
        86,
        91,
        115,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        146,
        131,
        22,
        96,
        0,
        144,
        129,
        82,
        96,
        32,
        129,
        129,
        82,
        96,
        64,
        128,
        131,
        32,
        148,
        144,
        149,
        22,
        130,
        82,
        146,
        144,
        146,
        82,
        145,
        144,
        32,
        84,
        22,
        21,
        21,
        144,
        86,
        91,
        96,
        64,
        81,
        97,
        0,
        123,
        145,
        144,
        97,
        2,
        6,
        86,
        91,
        97,
        0,
        110,
        97,
        0,
        232,
        54,
        96,
        4,
        97,
        2,
        44,
        86,
        91,
        96,
        0,
        128,
        130,
        96,
        2,
        129,
        17,
        21,
        97,
        0,
        253,
        87,
        97,
        0,
        253,
        97,
        2,
        85,
        86,
        91,
        96,
        1,
        144,
        27,
        147,
        146,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        115,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        130,
        22,
        91,
        146,
        145,
        80,
        80,
        86,
        91,
        97,
        1,
        49,
        129,
        97,
        1,
        8,
        86,
        91,
        129,
        20,
        97,
        1,
        60,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        86,
        91,
        128,
        53,
        97,
        1,
        34,
        129,
        97,
        1,
        40,
        86,
        91,
        96,
        0,
        128,
        96,
        64,
        131,
        133,
        3,
        18,
        21,
        97,
        1,
        96,
        87,
        97,
        1,
        96,
        96,
        0,
        128,
        253,
        91,
        96,
        0,
        97,
        1,
        108,
        133,
        133,
        97,
        1,
        63,
        86,
        91,
        146,
        80,
        80,
        96,
        32,
        97,
        1,
        125,
        133,
        130,
        134,
        1,
        97,
        1,
        63,
        86,
        91,
        145,
        80,
        80,
        146,
        80,
        146,
        144,
        80,
        86,
        91,
        128,
        91,
        130,
        82,
        80,
        80,
        86,
        91,
        96,
        32,
        129,
        1,
        97,
        1,
        34,
        130,
        132,
        97,
        1,
        135,
        86,
        91,
        128,
        97,
        1,
        49,
        86,
        91,
        128,
        53,
        97,
        1,
        34,
        129,
        97,
        1,
        157,
        86,
        91,
        96,
        0,
        128,
        96,
        0,
        96,
        96,
        132,
        134,
        3,
        18,
        21,
        97,
        1,
        198,
        87,
        97,
        1,
        198,
        96,
        0,
        128,
        253,
        91,
        96,
        0,
        97,
        1,
        210,
        134,
        134,
        97,
        1,
        63,
        86,
        91,
        147,
        80,
        80,
        96,
        32,
        97,
        1,
        227,
        134,
        130,
        135,
        1,
        97,
        1,
        63,
        86,
        91,
        146,
        80,
        80,
        96,
        64,
        97,
        1,
        244,
        134,
        130,
        135,
        1,
        97,
        1,
        163,
        86,
        91,
        145,
        80,
        80,
        146,
        80,
        146,
        80,
        146,
        86,
        91,
        128,
        21,
        21,
        97,
        1,
        137,
        86,
        91,
        96,
        32,
        129,
        1,
        97,
        1,
        34,
        130,
        132,
        97,
        1,
        254,
        86,
        91,
        96,
        3,
        129,
        16,
        97,
        1,
        60,
        87,
        96,
        0,
        128,
        253,
        91,
        128,
        53,
        97,
        1,
        34,
        129,
        97,
        2,
        20,
        86,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        2,
        65,
        87,
        97,
        2,
        65,
        96,
        0,
        128,
        253,
        91,
        96,
        0,
        97,
        2,
        77,
        132,
        132,
        97,
        2,
        33,
        86,
        91,
        148,
        147,
        80,
        80,
        80,
        80,
        86,
        91,
        127,
        78,
        72,
        123,
        113,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        96,
        0,
        82,
        96,
        33,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        254,
        162,
        100,
        105,
        112,
        102,
        115,
        88,
        34,
        18,
        32,
        111,
        112,
        189,
        8,
        103,
        75,
        236,
        235,
        201,
        89,
        243,
        222,
        123,
        70,
        43,
        50,
        249,
        185,
        114,
        153,
        151,
        119,
        189,
        68,
        122,
        226,
        37,
        157,
        167,
        126,
        97,
        78,
        100,
        115,
        111,
        108,
        99,
        67,
        0,
        8,
        19,
        0,
        51,
    ];
    ///The bytecode of the contract.
    pub static PERMISSIONS_BYTECODE: ::ethers::core::types::Bytes = ::ethers::core::types::Bytes::from_static(
        __BYTECODE,
    );
    #[rustfmt::skip]
    const __DEPLOYED_BYTECODE: &[u8] = &[
        96,
        128,
        96,
        64,
        82,
        52,
        128,
        21,
        97,
        0,
        16,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        4,
        54,
        16,
        97,
        0,
        65,
        87,
        96,
        0,
        53,
        96,
        224,
        28,
        128,
        99,
        31,
        152,
        56,
        181,
        20,
        97,
        0,
        70,
        87,
        128,
        99,
        139,
        1,
        129,
        61,
        20,
        97,
        0,
        132,
        87,
        128,
        99,
        165,
        114,
        220,
        116,
        20,
        97,
        0,
        218,
        87,
        91,
        96,
        0,
        128,
        253,
        91,
        97,
        0,
        110,
        97,
        0,
        84,
        54,
        96,
        4,
        97,
        1,
        74,
        86,
        91,
        96,
        0,
        96,
        32,
        129,
        129,
        82,
        146,
        129,
        82,
        96,
        64,
        128,
        130,
        32,
        144,
        147,
        82,
        144,
        129,
        82,
        32,
        84,
        129,
        86,
        91,
        96,
        64,
        81,
        97,
        0,
        123,
        145,
        144,
        97,
        1,
        143,
        86,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        243,
        91,
        97,
        0,
        205,
        97,
        0,
        146,
        54,
        96,
        4,
        97,
        1,
        174,
        86,
        91,
        115,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        146,
        131,
        22,
        96,
        0,
        144,
        129,
        82,
        96,
        32,
        129,
        129,
        82,
        96,
        64,
        128,
        131,
        32,
        148,
        144,
        149,
        22,
        130,
        82,
        146,
        144,
        146,
        82,
        145,
        144,
        32,
        84,
        22,
        21,
        21,
        144,
        86,
        91,
        96,
        64,
        81,
        97,
        0,
        123,
        145,
        144,
        97,
        2,
        6,
        86,
        91,
        97,
        0,
        110,
        97,
        0,
        232,
        54,
        96,
        4,
        97,
        2,
        44,
        86,
        91,
        96,
        0,
        128,
        130,
        96,
        2,
        129,
        17,
        21,
        97,
        0,
        253,
        87,
        97,
        0,
        253,
        97,
        2,
        85,
        86,
        91,
        96,
        1,
        144,
        27,
        147,
        146,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        115,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        130,
        22,
        91,
        146,
        145,
        80,
        80,
        86,
        91,
        97,
        1,
        49,
        129,
        97,
        1,
        8,
        86,
        91,
        129,
        20,
        97,
        1,
        60,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        86,
        91,
        128,
        53,
        97,
        1,
        34,
        129,
        97,
        1,
        40,
        86,
        91,
        96,
        0,
        128,
        96,
        64,
        131,
        133,
        3,
        18,
        21,
        97,
        1,
        96,
        87,
        97,
        1,
        96,
        96,
        0,
        128,
        253,
        91,
        96,
        0,
        97,
        1,
        108,
        133,
        133,
        97,
        1,
        63,
        86,
        91,
        146,
        80,
        80,
        96,
        32,
        97,
        1,
        125,
        133,
        130,
        134,
        1,
        97,
        1,
        63,
        86,
        91,
        145,
        80,
        80,
        146,
        80,
        146,
        144,
        80,
        86,
        91,
        128,
        91,
        130,
        82,
        80,
        80,
        86,
        91,
        96,
        32,
        129,
        1,
        97,
        1,
        34,
        130,
        132,
        97,
        1,
        135,
        86,
        91,
        128,
        97,
        1,
        49,
        86,
        91,
        128,
        53,
        97,
        1,
        34,
        129,
        97,
        1,
        157,
        86,
        91,
        96,
        0,
        128,
        96,
        0,
        96,
        96,
        132,
        134,
        3,
        18,
        21,
        97,
        1,
        198,
        87,
        97,
        1,
        198,
        96,
        0,
        128,
        253,
        91,
        96,
        0,
        97,
        1,
        210,
        134,
        134,
        97,
        1,
        63,
        86,
        91,
        147,
        80,
        80,
        96,
        32,
        97,
        1,
        227,
        134,
        130,
        135,
        1,
        97,
        1,
        63,
        86,
        91,
        146,
        80,
        80,
        96,
        64,
        97,
        1,
        244,
        134,
        130,
        135,
        1,
        97,
        1,
        163,
        86,
        91,
        145,
        80,
        80,
        146,
        80,
        146,
        80,
        146,
        86,
        91,
        128,
        21,
        21,
        97,
        1,
        137,
        86,
        91,
        96,
        32,
        129,
        1,
        97,
        1,
        34,
        130,
        132,
        97,
        1,
        254,
        86,
        91,
        96,
        3,
        129,
        16,
        97,
        1,
        60,
        87,
        96,
        0,
        128,
        253,
        91,
        128,
        53,
        97,
        1,
        34,
        129,
        97,
        2,
        20,
        86,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        2,
        65,
        87,
        97,
        2,
        65,
        96,
        0,
        128,
        253,
        91,
        96,
        0,
        97,
        2,
        77,
        132,
        132,
        97,
        2,
        33,
        86,
        91,
        148,
        147,
        80,
        80,
        80,
        80,
        86,
        91,
        127,
        78,
        72,
        123,
        113,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        96,
        0,
        82,
        96,
        33,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        254,
        162,
        100,
        105,
        112,
        102,
        115,
        88,
        34,
        18,
        32,
        111,
        112,
        189,
        8,
        103,
        75,
        236,
        235,
        201,
        89,
        243,
        222,
        123,
        70,
        43,
        50,
        249,
        185,
        114,
        153,
        151,
        119,
        189,
        68,
        122,
        226,
        37,
        157,
        167,
        126,
        97,
        78,
        100,
        115,
        111,
        108,
        99,
        67,
        0,
        8,
        19,
        0,
        51,
    ];
    ///The deployed bytecode of the contract.
    pub static PERMISSIONS_DEPLOYED_BYTECODE: ::ethers::core::types::Bytes = ::ethers::core::types::Bytes::from_static(
        __DEPLOYED_BYTECODE,
    );
    pub struct Permissions<M>(::ethers::contract::Contract<M>);
    impl<M> ::core::clone::Clone for Permissions<M> {
        fn clone(&self) -> Self {
            Self(::core::clone::Clone::clone(&self.0))
        }
    }
    impl<M> ::core::ops::Deref for Permissions<M> {
        type Target = ::ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M> ::core::ops::DerefMut for Permissions<M> {
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl<M> ::core::fmt::Debug for Permissions<M> {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple(stringify!(Permissions)).field(&self.address()).finish()
        }
    }
    impl<M: ::ethers::providers::Middleware> Permissions<M> {
        /// Creates a new contract instance with the specified `ethers` client at
        /// `address`. The contract derefs to a `ethers::Contract` object.
        pub fn new<T: Into<::ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            Self(
                ::ethers::contract::Contract::new(
                    address.into(),
                    PERMISSIONS_ABI.clone(),
                    client,
                ),
            )
        }
        /// Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it.
        /// Returns a new instance of a deployer that returns an instance of this contract after sending the transaction
        ///
        /// Notes:
        /// - If there are no constructor arguments, you should pass `()` as the argument.
        /// - The default poll duration is 7 seconds.
        /// - The default number of confirmations is 1 block.
        ///
        ///
        /// # Example
        ///
        /// Generate contract bindings with `abigen!` and deploy a new contract instance.
        ///
        /// *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact.
        ///
        /// ```ignore
        /// # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {
        ///     abigen!(Greeter, "../greeter.json");
        ///
        ///    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();
        ///    let msg = greeter_contract.greet().call().await.unwrap();
        /// # }
        /// ```
        pub fn deploy<T: ::ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> ::core::result::Result<
            ::ethers::contract::builders::ContractDeployer<M, Self>,
            ::ethers::contract::ContractError<M>,
        > {
            let factory = ::ethers::contract::ContractFactory::new(
                PERMISSIONS_ABI.clone(),
                PERMISSIONS_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ::ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        ///Calls the contract's `getPermissionCode` (0xa572dc74) function
        pub fn get_permission_code(
            &self,
            p: u8,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([165, 114, 220, 116], p)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `hasPermission` (0x8b01813d) function
        pub fn has_permission(
            &self,
            granter: ::ethers::core::types::Address,
            grantee: ::ethers::core::types::Address,
            permission: ::ethers::core::types::U256,
        ) -> ::ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([139, 1, 129, 61], (granter, grantee, permission))
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `permissions` (0x1f9838b5) function
        pub fn permissions(
            &self,
            p0: ::ethers::core::types::Address,
            p1: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([31, 152, 56, 181], (p0, p1))
                .expect("method not found (this should never happen)")
        }
    }
    impl<M: ::ethers::providers::Middleware> From<::ethers::contract::Contract<M>>
    for Permissions<M> {
        fn from(contract: ::ethers::contract::Contract<M>) -> Self {
            Self::new(contract.address(), contract.client())
        }
    }
    ///Container type for all input parameters for the `getPermissionCode` function with signature `getPermissionCode(uint8)` and selector `0xa572dc74`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "getPermissionCode", abi = "getPermissionCode(uint8)")]
    pub struct GetPermissionCodeCall {
        pub p: u8,
    }
    ///Container type for all input parameters for the `hasPermission` function with signature `hasPermission(address,address,uint256)` and selector `0x8b01813d`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "hasPermission", abi = "hasPermission(address,address,uint256)")]
    pub struct HasPermissionCall {
        pub granter: ::ethers::core::types::Address,
        pub grantee: ::ethers::core::types::Address,
        pub permission: ::ethers::core::types::U256,
    }
    ///Container type for all input parameters for the `permissions` function with signature `permissions(address,address)` and selector `0x1f9838b5`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "permissions", abi = "permissions(address,address)")]
    pub struct PermissionsCall(
        pub ::ethers::core::types::Address,
        pub ::ethers::core::types::Address,
    );
    ///Container type for all of the contract's call
    #[derive(Clone, ::ethers::contract::EthAbiType, Debug, PartialEq, Eq, Hash)]
    pub enum PermissionsCalls {
        GetPermissionCode(GetPermissionCodeCall),
        HasPermission(HasPermissionCall),
        Permissions(PermissionsCall),
    }
    impl ::ethers::core::abi::AbiDecode for PermissionsCalls {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::core::result::Result<Self, ::ethers::core::abi::AbiError> {
            let data = data.as_ref();
            if let Ok(decoded)
                = <GetPermissionCodeCall as ::ethers::core::abi::AbiDecode>::decode(
                    data,
                ) {
                return Ok(Self::GetPermissionCode(decoded));
            }
            if let Ok(decoded)
                = <HasPermissionCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::HasPermission(decoded));
            }
            if let Ok(decoded)
                = <PermissionsCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::Permissions(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ::ethers::core::abi::AbiEncode for PermissionsCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                Self::GetPermissionCode(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::HasPermission(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::Permissions(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
            }
        }
    }
    impl ::core::fmt::Display for PermissionsCalls {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                Self::GetPermissionCode(element) => ::core::fmt::Display::fmt(element, f),
                Self::HasPermission(element) => ::core::fmt::Display::fmt(element, f),
                Self::Permissions(element) => ::core::fmt::Display::fmt(element, f),
            }
        }
    }
    impl ::core::convert::From<GetPermissionCodeCall> for PermissionsCalls {
        fn from(value: GetPermissionCodeCall) -> Self {
            Self::GetPermissionCode(value)
        }
    }
    impl ::core::convert::From<HasPermissionCall> for PermissionsCalls {
        fn from(value: HasPermissionCall) -> Self {
            Self::HasPermission(value)
        }
    }
    impl ::core::convert::From<PermissionsCall> for PermissionsCalls {
        fn from(value: PermissionsCall) -> Self {
            Self::Permissions(value)
        }
    }
    ///Container type for all return fields from the `getPermissionCode` function with signature `getPermissionCode(uint8)` and selector `0xa572dc74`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct GetPermissionCodeReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `hasPermission` function with signature `hasPermission(address,address,uint256)` and selector `0x8b01813d`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct HasPermissionReturn(pub bool);
    ///Container type for all return fields from the `permissions` function with signature `permissions(address,address)` and selector `0x1f9838b5`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct PermissionsReturn(pub ::ethers::core::types::U256);
}
